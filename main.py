# -*- coding: utf-8 -*-
"""Poprawiony main.py z Lepszym Logowaniem Błędów

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qn7ulQVyzsiRM3VOMKZxDwiWYuIG1d4T
"""

# ... existing code ...
from data_fetcher import DataFetcher

# --- PRAWIDŁOWE I BEZPIECZNE TWORZENIE OBIEKTU DATA FETCHER ---
data_fetcher = None
try:
    print("INFO: Próba odczytania klucza ALPHA_VANTAGE_API_KEY...")
    api_key = os.getenv("ALPHA_VANTAGE_API_KEY")
    if not api_key or len(api_key) < 5: # Prosty test, czy klucz wygląda na prawdziwy
        print("FATAL: Zmienna środowiskowa ALPHA_VANTAGE_API_KEY nie jest ustawiona lub jest pusta!")
        # W środowisku produkcyjnym aplikacja nie może działać bez klucza.
        # Rzucamy wyjątek, co zatrzyma aplikację, ale z czytelnym komunikatem w logach.
        raise ValueError("Brak klucza API. Aplikacja nie może wystartować.")

    print("INFO: Klucz API odczytany. Inicjalizowanie DataFetcher...")
    data_fetcher = DataFetcher(api_key=api_key)
    print("INFO: DataFetcher zainicjalizowany pomyślnie.")

except Exception as e:
    # Łapiemy każdy możliwy błąd podczas inicjalizacji i logujemy go.
    # To da nam znać, co dokładnie poszło nie tak.
    print(f"FATAL: Krytyczny błąd podczas inicjalizacji DataFetcher: {e}")
    # Rzucamy wyjątek dalej, aby zatrzymać aplikację, ale już po zalogowaniu błędu
    raise e


app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Ścieżka testowa (Health Check) ---
@app.get("/")
async def root():
    """ Prosty endpoint do sprawdzania, czy API w ogóle działa. """
    return {"status": "API is running correctly"}


# --- PRAWIDŁOWE I BEZPIECZNE TWORZENIE OBIEKTU DATA FETCHER ---
data_fetcher = None
try: