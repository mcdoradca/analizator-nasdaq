# -*- coding: utf-8 -*-
"""Nowy Agent Ryzyka "Cerber"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zS6UoMGzcb-B1dOwix8GG5OQGjJqv0e5
"""

from typing import Dict, List, Tuple
import pandas as pd
from itertools import combinations

def calculate_returns_correlation(data_a: pd.DataFrame, data_b: pd.DataFrame) -> float:
    """
    Oblicza korelację Pearsona dla dziennych stóp zwrotu dwóch serii danych.

    Args:
        data_a (pd.DataFrame): DataFrame z danymi historycznymi dla pierwszej spółki.
        data_b (pd.DataFrame): DataFrame z danymi historycznymi dla drugiej spółki.

    Returns:
        float: Współczynnik korelacji.
    """
    # Upewnijmy się, że obie serie mają te same daty
    merged_data = pd.merge(data_a['4. close'], data_b['4. close'], on='date', how='inner')

    # Oblicz dzienne stopy zwrotu
    returns = merged_data.pct_change().dropna()

    # Oblicz korelację
    correlation = returns.iloc[:, 0].corr(returns.iloc[:, 1])
    return correlation

def analyze_portfolio_risk(portfolio_data: Dict[str, pd.DataFrame]) -> Dict:
    """
    Analizuje ryzyko portfela pod kątem korelacji między aktywami.
    Implementacja logiki Agenta "Cerber".

    Args:
        portfolio_data (Dict[str, pd.DataFrame]): Słownik, gdzie klucze to tickery,
                                                  a wartości to DataFrame'y z ich danymi.

    Returns:
        Dict: Słownik zawierający analizę ryzyka, w tym średnią korelację i ostrzeżenia.
    """
    print("INFO: Agent 'Cerber' analizuje ryzyko korelacji portfela...")
    tickers = list(portfolio_data.keys())

    if len(tickers) < 2:
        return {
            "average_correlation": None,
            "correlation_level": "Brak Danych",
            "warnings": ["Portfel musi zawierać co najmniej 2 aktywa do analizy korelacji."]
        }

    all_correlations = []
    warnings = []

    # Generuj wszystkie unikalne pary tickerów
    ticker_pairs = combinations(tickers, 2)

    for ticker_a, ticker_b in ticker_pairs:
        data_a = portfolio_data[ticker_a]
        data_b = portfolio_data[ticker_b]

        correlation = calculate_returns_correlation(data_a, data_b)
        all_correlations.append(correlation)

        if correlation > 0.8:
            warnings.append(
                f"Wysoka korelacja ({correlation:.2f}) między {ticker_a} a {ticker_b}. "
                "Wzrost ryzyka koncentracji."
            )

    average_correlation = sum(all_correlations) / len(all_correlations)

    corr_level = "Niski"
    if average_correlation > 0.7:
        corr_level = "Bardzo Wysoki"
    elif average_correlation > 0.5:
        corr_level = "Wysoki"
    elif average_correlation > 0.3:
        corr_level = "Umiarkowany"

    return {
        "average_correlation": round(average_correlation, 2),
        "correlation_level": corr_level,
        "warnings": warnings
    }