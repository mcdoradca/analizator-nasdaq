# -*- coding: utf-8 -*-
"""Kluczowy Moduł Danych

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_R0-rp7tQU53D7uO2nJMJEuytCMrzvOf
"""

# src/data_fetcher.py

"""
Moduł do komunikacji z API Alpha Vantage.

Odpowiedzialność: Bezpieczne i wydajne pobieranie danych giełdowych,
z uwzględnieniem limitów API.
"""
import requests
import os
import time
from collections import deque

class DataFetcher:
    def __init__(self, api_key: str):
        if not api_key:
            raise ValueError("Klucz API jest wymagany.")
        self.api_key = api_key
        self.base_url = "https://www.alphavantage.co/query"
        self.api_call_timestamps = deque()
        self.requests_per_minute = 75

    def _wait_if_needed(self):
        """Inteligentnie zarządza częstotliwością zapytań."""
        now = time.time()
        # Usuń znaczniki starsze niż minuta
        while self.api_call_timestamps and self.api_call_timestamps[0] <= now - 60:
            self.api_call_timestamps.popleft()

        if len(self.api_call_timestamps) >= self.requests_per_minute:
            time_to_wait = 60 - (now - self.api_call_timestamps[0])
            print(f"Osiągnięto limit API. Czekam {time_to_wait:.2f}s...")
            time.sleep(time_to_wait)

    def get_data(self, params: dict) -> dict | None:
        """
        Wykonuje zapytanie do API Alpha Vantage.
        """
        self._wait_if_needed()

        all_params = {"apikey": self.api_key, **params}

        try:
            response = requests.get(self.base_url, params=all_params)
            response.raise_for_status() # Rzuca wyjątek dla błędów HTTP 4xx/5xx

            self.api_call_timestamps.append(time.time())

            data = response.json()
            if "Error Message" in data or "Information" in data:
                print(f"Błąd API: {data.get('Error Message') or data.get('Information')}")
                return None
            return data
        except requests.exceptions.RequestException as e:
            print(f"Błąd sieciowy: {e}")
            return None
        except ValueError:
            print("Błąd dekodowania odpowiedzi JSON.")
            return None

# Przykładowe użycie (do testów)
if __name__ == "__main__":
    # Pamiętaj, aby ustawić klucz API jako zmienną środowiskową
    API_KEY = os.getenv("ALPHA_VANTAGE_API_KEY", "TWOJ_KLUCZ_API")
    fetcher = DataFetcher(api_key=API_KEY)

    print("Testowanie pobierania danych dla AAPL...")
    aapl_data = fetcher.get_data({"function": "OVERVIEW", "symbol": "AAPL"})
    if aapl_data:
        print(f"Pobrano dane dla: {aapl_data.get('Name')}")