# -*- coding: utf-8 -*-
"""Poprawiony Agent Selekcyjny (bez limitu)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XS66jWERBaVeBbH6Jf1K3HtWC2LUUKPv
"""

"""
Moduł Agentów Selekcyjnych ("Rewolucja AI").

Odpowiedzialność: Skanowanie całego rynku Nasdaq, selekcja spółek (Faza 1)
oraz ich dogłębna analiza (Faza 2) w celu wyłonienia "Dream Teamu".
"""
import pandas as pd
from io import StringIO
from utils import safe_float, get_latest_value

# --- Agenci Fazy 2 ---

def agent_plynnosci(daily_data):
    """Analizuje wolumen w poszukiwaniu skoków zainteresowania."""
    try:
        if not daily_data or 'Time Series (Daily)' not in daily_data: return False
        series = list(daily_data['Time Series (Daily)'].values())[:30]
        if len(series) < 30: return False

        volumes = [safe_float(day['5. volume']) for day in series]
        if not volumes: return False
        avg_volume = sum(volumes) / len(volumes)
        if avg_volume == 0: return False

        return any(v > avg_volume * 5 for v in volumes)
    except Exception:
        return False

def agent_impulsu(sma_data, current_price):
    """Sprawdza, czy cena jest powyżej 50-dniowej średniej kroczącej."""
    try:
        if not sma_data: return False
        latest_sma = safe_float(get_latest_value(sma_data, 'Technical Analysis: SMA', 'SMA'))
        return current_price > latest_sma
    except Exception:
        return False

def agent_zmiennosci(atr_data, current_price):
    """Sprawdza, czy dzienna zmienność (ATR) jest wystarczająco duża."""
    try:
        if not atr_data: return False
        latest_atr = safe_float(get_latest_value(atr_data, 'Technical Analysis: ATR', 'ATR'))
        if current_price == 0: return False
        return (latest_atr / current_price) >= 0.04
    except Exception:
        return False

# --- Agent Fazy 1 ---

def agent_listy_rynkowej(data_fetcher):
    """
    Pobiera pełną listę wszystkich spółek notowanych na Nasdaq.
    """
    print("[Rewolucja AI] Agent Listy Rynkowej pobiera listę spółek z Nasdaq...")
    try:
        csv_data = data_fetcher.get_data({"function": "LISTING_STATUS"}, response_format='csv')
        if not csv_data or not isinstance(csv_data, str):
            print("[Rewolucja AI] Błąd: Nie otrzymano danych CSV z API.")
            return []

        df = pd.read_csv(StringIO(csv_data))
        nasdaq_stocks = df[(df['exchange'] == 'NASDAQ') & (df['assetType'] == 'Stock') & (df['status'] == 'Active')]

        tickers = nasdaq_stocks['symbol'].tolist()
        print(f"[Rewolucja AI] Pomyślnie pobrano {len(tickers)} aktywnych spółek.")
        return tickers
    except Exception as e:
        print(f"[Rewolucja AI] Krytyczny błąd podczas pobierania listy spółek: {e}")
        return []

# --- Główny Proces "Rewolucji AI" ---

def run_market_scan(data_fetcher):
    """
    Orkiestruje cały, dwufazowy proces Rewolucji AI.
    """
    full_market_list = agent_listy_rynkowej(data_fetcher)
    if not full_market_list:
        return {"candidates": [], "log": ["Błąd: Nie udało się pobrać listy rynku."]}

    faza_1_candidates = []
    log = [f"Rozpoczynam Fazę 1: Skanowanie {len(full_market_list)} spółek..."]

    # NAPRAWIONO: Usunięto sztuczne ograniczenie do 500 spółek. Skanowany jest cały rynek.
    for ticker in full_market_list:
        try:
            quote_data = data_fetcher.get_data({"function": "GLOBAL_QUOTE", "symbol": ticker})
            if not quote_data or 'Global Quote' not in quote_data: continue

            price = safe_float(quote_data['Global Quote'].get('05. price'))
            volume = safe_float(quote_data['Global Quote'].get('06. volume'))

            if 0 < price <= 5.0 and volume > 100000:
                faza_1_candidates.append(ticker)
                log.append(f"[Faza 1] Znaleziono kandydata: {ticker} (Cena: ${price:.2f})")
        except Exception:
            continue

    log.append(f"Faza 1 Zakończona. Znaleziono {len(faza_1_candidates)} kandydatów.")

    faza_2_candidates = []
    log.append(f"Rozpoczynam Fazę 2: Analiza {len(faza_1_candidates)} spółek...")

    for ticker in faza_1_candidates:
        try:
            daily_data = data_fetcher.get_data({"function": "TIME_SERIES_DAILY", "symbol": ticker, "outputsize": "compact"})
            sma_data = data_fetcher.get_data({"function": "SMA", "symbol": ticker, "interval": "daily", "time_period": 50, "series_type": "close"})
            atr_data = data_fetcher.get_data({"function": "ATR", "symbol": ticker, "interval": "daily", "time_period": 14})

            if not all([daily_data, sma_data, atr_data]):
                log.append(f"[Faza 2] Pominięto {ticker} - brak kompletnych danych.")
                continue

            # W Alpha Vantage dane dzienne mogą nie mieć '10. change percent'
            latest_day_key = next(iter(daily_data['Time Series (Daily)']))
            latest_day_data = daily_data['Time Series (Daily)'][latest_day_key]

            current_price = safe_float(latest_day_data.get('4. close'))
            change_percent_raw = latest_day_data.get('10. change percent', '0%') # Domyślna wartość
            change_percent = safe_float(str(change_percent_raw).replace('%', ''))

            score = 0
            if agent_plynnosci(daily_data): score += 1
            if agent_impulsu(sma_data, current_price): score += 1
            if agent_zmiennosci(atr_data, current_price): score += 1

            if score >= 2:
                candidate_object = {
                    "ticker": ticker,
                    "status": "Nowy Kandydat",
                    "currentPrice": current_price,
                    "changePercent": change_percent,
                    "aiScore": score
                }
                faza_2_candidates.append(candidate_object)
                log.append(f"[Faza 2] Spółka {ticker} zakwalifikowana. Wynik: {score}/3")
            else:
                log.append(f"[Faza 2] Spółka {ticker} odrzucona. Wynik: {score}/3")
        except Exception as e:
            log.append(f"[Faza 2] Błąd podczas analizy {ticker}: {e}")
            continue

    log.append(f"Rewolucja AI zakończona. Wyłoniono {len(faza_2_candidates)} spółek do Dream Teamu.")
    return {"candidates": faza_2_candidates, "log": log}