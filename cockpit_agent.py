# -*- coding: utf-8 -*-
"""Naprawiony Agent Kokpitu

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1prtlflKuqcW_v4ckd56w0ewE18d_-fZu
"""

"""
Moduł Agenta "Kokpitu".

Odpowiedzialność: Przeprowadzanie zaawansowanej analityki na historii
transakcji portfela w celu generowania wskaźników i spostrzeżeń.
"""
# Ulepszono: Dodano type hinting dla czytelności i bezpieczeństwa.
from typing import List, Dict, Any, Union

def agent_analityki_portfela(closed_positions: List[Dict[str, Any]]) -> Dict[str, Union[float, int, str]]:
    """
    Analizuje zamknięte pozycje i oblicza kluczowe wskaźniki wydajności.
    """
    # Ulepszono: Dodano walidację typu wejściowego dla większej stabilności.
    if not closed_positions or not isinstance(closed_positions, list):
        return {
            "totalPnl": 0,
            "winRate": 0,
            "totalTrades": 0,
            "profitFactor": "N/A",
            "avgProfit": 0,
            "avgLoss": 0
        }

    total_trades = len(closed_positions)

    # Ulepszono: Filtrowanie transakcji jest teraz odporne na brak klucza 'pnl' lub nieprawidłowe typy danych.
    winning_trades = [p for p in closed_positions if isinstance(p.get('pnl'), (int, float)) and p.get('pnl', 0) > 0]
    losing_trades = [p for p in closed_positions if isinstance(p.get('pnl'), (int, float)) and p.get('pnl', 0) < 0]
    valid_trades = [p for p in closed_positions if isinstance(p.get('pnl'), (int, float))]

    total_pnl = sum(p.get('pnl', 0) for p in valid_trades)
    win_rate = (len(winning_trades) / total_trades) * 100 if total_trades > 0 else 0

    total_profit = sum(p.get('pnl', 0) for p in winning_trades)
    total_loss = abs(sum(p.get('pnl', 0) for p in losing_trades))

    avg_profit = total_profit / len(winning_trades) if winning_trades else 0
    avg_loss = total_loss / len(losing_trades) if losing_trades else 0

    profit_factor: Union[float, str]
    if total_loss > 0:
        profit_factor = total_profit / total_loss
    else:
        profit_factor = "∞"  # Nieskończoność, jeśli nie ma strat

    return {
        "totalPnl": round(total_pnl, 2),
        "winRate": round(win_rate, 1),
        "totalTrades": total_trades,
        "profitFactor": round(profit_factor, 2) if isinstance(profit_factor, float) else profit_factor,
        "avgProfit": round(avg_profit, 2),
        "avgLoss": round(avg_loss, 2)
    }

# NAPRAWIONO: Zmieniono nazwę funkcji z `run_cockpit_analysis` na `analyze_cockpit_data`,
# aby była zgodna z importem i wywołaniem w pliku `main.py`. Jest to krytyczna poprawka.
def analyze_cockpit_data(closed_positions: List[Dict[str, Any]]) -> Dict[str, Union[float, int, str]]:
    """
    Główna funkcja orkiestrująca analizę kokpitu.
    """
    print(f"[Kokpit] Uruchamiam analizę dla {len(closed_positions) if isinstance(closed_positions, list) else 0} zamkniętych transakcji.")

    analytics = agent_analityki_portfela(closed_positions)

    print("[Kokpit] Analiza statystyk portfela zakończona.")
    return analytics